{"version":3,"sources":["App.tsx","Home.tsx","../src/toast.tsx","../src/utils/useDimensions.ts","../src/toast-container.tsx","../src/hook/context.ts","../src/hook/provider.tsx","../src/hook/useToast.ts"],"names":["App","placement","dangerIcon","name","color","successIcon","size","offset","renderType","custom_toast","toast","style","maxWidth","paddingHorizontal","paddingVertical","backgroundColor","marginVertical","borderRadius","borderLeftColor","borderLeftWidth","justifyContent","paddingLeft","fontSize","fontWeight","data","title","marginTop","message","with_close_button","flexDirection","marginRight","onPress","onHide","marginLeft","width","height","alignItems","marginBottom","StyleSheet","create","container","flex","test","styles","Home","useToast","inputRef","useRef","useEffect","global","show","duration","type","animationDuration","animationType","id","setTimeout","update","hide","current","focus","swipeEnabled","ref","placeholder","onClose","console","log","hideAll","toastContainer","overflow","iconContainer","Toast","props","onDestroy","icon","textStyle","warningIcon","successColor","dangerColor","warningColor","normalColor","containerRef","useState","Animated","Value","animation","panResponderRef","panResponderAnimRef","closeTimeoutRef","dims","Dimensions","get","dimensions","setDimensions","onChange","window","addEventListener","removeEventListener","useDimensions","timing","toValue","useNativeDriver","Platform","OS","start","handleClose","clearTimeout","open","getPanResponderAnim","ValueXY","x","y","undefined","animationStyle","opacity","transform","translateY","interpolate","inputRange","outputRange","push","getTranslateTransform","scale","View","PanResponder","onMoveShouldSetPanResponder","_","gestureState","dx","dy","onPanResponderMove","setValue","onPanResponderRelease","panReleaseToRight","panReleaseToLeft","spring","panHandlers","renderToast","TouchableWithoutFeedback","disabled","React","isValidElement","Text","ToastContainer","toastOptions","Math","random","toString","setState","toasts","state","filter","t","requestAnimationFrame","map","this","bottom","offsetBottom","KeyboardAvoidingView","behavior","pointerEvents","key","top","offsetTop","renderTopToasts","renderBottomToasts","Component","defaultProps","position","zIndex","left","right","ToastContext","createContext","ToastProvider","children","toastRef","refState","setRefState","Provider","value","useContext"],"mappings":"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","file":"static/js/app.a014a60b.chunk.js","sourcesContent":["import React from \"react\";\nimport { StyleSheet, View, Text, TouchableOpacity } from \"react-native\";\nimport { ToastProvider } from \"react-native-toast-notifications\";\nimport { MaterialCommunityIcons } from \"@expo/vector-icons\";\nimport Home from \"./Home\";\n\nexport default function App() {\n  return (\n    <ToastProvider\n      placement=\"bottom\"\n      dangerIcon={<MaterialCommunityIcons name=\"close\" color=\"#fff\" />}\n      successIcon={<MaterialCommunityIcons name=\"check\" color=\"#fff\" size={18} />}\n      offset={10}\n      // Custom type example\n      renderType={{\n        custom_toast: (toast) => (\n          <View\n            style={{\n              maxWidth: \"85%\",\n              paddingHorizontal: 15,\n              paddingVertical: 10,\n              backgroundColor: \"#fff\",\n              marginVertical: 4,\n              borderRadius: 8,\n              borderLeftColor: \"#00C851\",\n              borderLeftWidth: 6,\n              justifyContent: \"center\",\n              paddingLeft: 16,\n            }}\n          >\n            <Text\n              style={{\n                fontSize: 14,\n                color: \"#333\",\n                fontWeight: \"bold\",\n              }}\n            >\n              {toast.data.title}\n            </Text>\n            <Text style={{ color: \"#a3a3a3\", marginTop: 2 }}>{toast.message}</Text>\n          </View>\n        ),\n        with_close_button: (toast) => (\n          <View\n            style={{\n              maxWidth: \"85%\",\n              paddingVertical: 10,\n              backgroundColor: \"#fff\",\n              marginVertical: 4,\n              borderRadius: 8,\n              borderLeftColor: \"#00C851\",\n              borderLeftWidth: 6,\n              justifyContent: \"center\",\n              paddingHorizontal: 16,\n              flexDirection: \"row\",\n            }}\n          >\n            <Text style={{ color: \"#a3a3a3\", marginRight: 16 }}>{toast.message}</Text>\n            <TouchableOpacity\n              onPress={() => toast.onHide()}\n              style={{\n                marginLeft: \"auto\",\n                width: 25,\n                height: 25,\n                borderRadius: 5,\n                backgroundColor: \"#333\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n              }}\n            >\n              <Text style={{ color: \"#fff\", fontWeight: \"500\", marginBottom: 2.5 }}>\n                x\n              </Text>\n            </TouchableOpacity>\n          </View>\n        ),\n      }}\n    >\n      <Home />\n    </ToastProvider>\n  );\n}\n\nexport const styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#eee\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  test: {\n    fontSize: 16,\n    marginTop: 10,\n  },\n});\n","import { StatusBar } from \"expo-status-bar\";\nimport React, { useRef, useEffect } from \"react\";\nimport { StyleSheet, Text, View, TextInput } from \"react-native\";\n\nimport { ToastProvider, useToast } from \"react-native-toast-notifications\";\n\nconst Home = () => {\n  const toast = useToast();\n  const inputRef = useRef<TextInput>(null);\n\n  useEffect(() => {\n    global[\"toast\"] = toast;\n  }, []);\n\n  return (\n    <ToastProvider placement=\"bottom\">\n      <View style={styles.container}>\n        <StatusBar style=\"auto\" />\n        <Text\n          onPress={() => toast.show(\"This is a toast!\", { duration: 10000 })}\n          style={styles.test}\n        >\n          Normal\n        </Text>\n        <Text\n          onPress={() =>\n            toast.show(\"This is a success toast!\", {\n              type: \"success\",\n            })\n          }\n          style={styles.test}\n        >\n          Success\n        </Text>\n        <Text\n          onPress={() =>\n            toast.show(\"This is a danger toast!\", {\n              type: \"danger\",\n            })\n          }\n          style={styles.test}\n        >\n          Danger\n        </Text>\n        <Text\n          onPress={() =>\n            toast.show(\"This is a warning toast!\", {\n              type: \"warning\",\n            })\n          }\n          style={styles.test}\n        >\n          Warning\n        </Text>\n        <Text\n          onPress={() =>\n            toast.show(\"This is a customized toast! you can implement your own\", {\n              type: \"custom_toast\",\n              animationDuration: 100,\n              data: {\n                title: \"Customized toast\",\n              },\n            })\n          }\n          style={styles.test}\n        >\n          Custom type\n        </Text>\n        <Text\n          onPress={() =>\n            toast.show(\"This is a customized toast with close button!\", {\n              type: \"with_close_button\",\n              animationDuration: 100,\n            })\n          }\n          style={styles.test}\n        >\n          Custom type 2\n        </Text>\n        <Text\n          onPress={() => {\n            toast.show(\"This toast should render on top\", {\n              placement: \"top\",\n            });\n          }}\n          style={[styles.test, { marginTop: 30 }]}\n        >\n          Placement top\n        </Text>\n        <Text\n          onPress={() => {\n            toast?.show(\"This toast have zoom-in animation\", {\n              placement: \"bottom\",\n              animationType: \"zoom-in\",\n            });\n          }}\n          style={[styles.test]}\n        >\n          Zoom in animation type\n        </Text>\n        <Text\n          onPress={() => {\n            let id = toast.show(\"This toast will update\", {});\n            setTimeout(() => {\n              if (id) {\n                toast.update(id, \"Toast updated\", {\n                  type: \"success\",\n                });\n              }\n            }, 1000);\n          }}\n          style={styles.test}\n        >\n          Update a Toast\n        </Text>\n\n        <Text\n          onPress={() => {\n            toast.show(\"Global toast call\");\n          }}\n          style={[styles.test]}\n        >\n          Global toast call\n        </Text>\n\n        <Text\n          onPress={() => {\n            toast.show(\"Toast 1\");\n            toast.show(\"Toast 2\");\n          }}\n          style={[styles.test, { marginTop: 30 }]}\n        >\n          Two toast at same time\n        </Text>\n\n        <Text\n          onPress={() => {\n            toast.show(\"Press to close\", {\n              duration: 10000,\n              onPress: (id) => {\n                toast.hide(id);\n              },\n            });\n          }}\n          style={[styles.test]}\n        >\n          Toast onPress & close on press\n        </Text>\n        <Text\n          onPress={() => {\n            inputRef.current?.focus();\n            toast.show(\"Hi!\", { swipeEnabled: false });\n          }}\n          style={[styles.test, { marginBottom: 30 }]}\n        >\n          Swipe to close disabled\n        </Text>\n        <TextInput ref={inputRef} style={{ height: 50 }} placeholder=\"Input\"></TextInput>\n\n        <Text\n          onPress={() => {\n            inputRef.current?.focus();\n            toast.show(\"Hi!\");\n          }}\n          style={[styles.test]}\n        >\n          Toast avoids keyboard\n        </Text>\n        <Text\n          onPress={() => {\n            inputRef.current?.focus();\n            toast.show(\"Logs to console on close\", {\n              onClose: () => console.log(\"Toast closed!\"),\n            });\n          }}\n          style={[styles.test]}\n        >\n          onClose event\n        </Text>\n        <Text\n          onPress={() => {\n            toast.hideAll();\n          }}\n          style={[styles.test]}\n        >\n          Hide all open toasts\n        </Text>\n      </View>\n    </ToastProvider>\n  );\n};\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#eee\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  test: {\n    fontSize: 16,\n    marginTop: 10,\n  },\n});\n\nexport default Home;\n","import React, { FC, useRef, useEffect, useState } from \"react\";\nimport {\n  View,\n  StyleSheet,\n  Animated,\n  StyleProp,\n  ViewStyle,\n  TextStyle,\n  Text,\n  TouchableWithoutFeedback,\n  PanResponder,\n  PanResponderInstance,\n  PanResponderGestureState,\n  Platform,\n} from \"react-native\";\nimport { useDimensions } from \"./utils/useDimensions\";\n\nexport interface ToastOptions {\n  /**\n   * Id is optional, you may provide an id only if you want to update toast later using toast.update()\n   */\n  id?: string;\n\n  /**\n   * Customize toast icon\n   */\n  icon?: JSX.Element;\n\n  /**\n   * Toast types, You can implement your custom types with JSX using renderType method on ToastContainer.\n   */\n  type?: \"normal\" | \"success\" | \"danger\" | \"warning\" | string;\n\n  /**\n   * In ms, How long toast will stay before it go away\n   */\n  duration?: number;\n\n  /**\n   * Customize when toast should be placed\n   */\n  placement?: \"top\" | \"bottom\";\n\n  /**\n   * Customize style of toast\n   */\n  style?: StyleProp<ViewStyle>;\n\n  /**\n   * Customize style of toast text\n   */\n  textStyle?: StyleProp<TextStyle>;\n\n  /**\n   * Customize how fast toast will show and hide\n   */\n  animationDuration?: number;\n\n  /**\n   * Customize how toast is animated when added or removed\n   */\n  animationType?: \"slide-in\" | \"zoom-in\";\n\n  /**\n   * Customize success type icon\n   */\n  successIcon?: JSX.Element;\n\n  /**\n   * Customize danger type icon\n   */\n  dangerIcon?: JSX.Element;\n\n  /**\n   * Customize warning type icon\n   */\n  warningIcon?: JSX.Element;\n\n  /**\n   * Customize success type color. changes toast background color\n   */\n  successColor?: string;\n\n  /**\n   * Customize danger type color. changes toast background color\n   */\n  dangerColor?: string;\n\n  /**\n   * Customize warning type color. changes toast background color\n   */\n  warningColor?: string;\n\n  /**\n   * Customize normal type color. changes toast background color\n   */\n  normalColor?: string;\n\n  /**\n   * Register event for when toast is pressed. If you're using a custom toast you have to pass this to a Touchable.\n   */\n  onPress?(id: string): void;\n\n  /**\n   * Execute event after toast is closed\n   */\n  onClose?(): void;\n\n  /**\n   * Payload data for custom toasts. You can pass whatever you want\n   */\n  data?: any;\n\n  swipeEnabled?: boolean;\n}\n\nexport interface ToastProps extends ToastOptions {\n  id: string;\n  onDestroy(): void;\n  message: string | JSX.Element;\n  open: boolean;\n  renderToast?(toast: ToastProps): JSX.Element;\n  renderType?: { [type: string]: (toast: ToastProps) => JSX.Element };\n  onHide(): void;\n}\n\nconst Toast: FC<ToastProps> = (props) => {\n  let {\n    id,\n    onDestroy,\n    icon,\n    type = \"normal\",\n    message,\n    duration = 5000,\n    style,\n    textStyle,\n    animationDuration = 250,\n    animationType = \"slide-in\",\n    successIcon,\n    dangerIcon,\n    warningIcon,\n    successColor,\n    dangerColor,\n    warningColor,\n    normalColor,\n    placement,\n    swipeEnabled,\n    onPress,\n  } = props;\n\n  const containerRef = useRef<View>(null);\n  const [animation] = useState(new Animated.Value(0));\n  const panResponderRef = useRef<PanResponderInstance>();\n  const panResponderAnimRef = useRef<Animated.ValueXY>();\n  const closeTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n  const dims = useDimensions();\n\n  useEffect(() => {\n    Animated.timing(animation, {\n      toValue: 1,\n      useNativeDriver: Platform.OS !== \"web\",\n      duration: animationDuration,\n    }).start();\n    if (duration !== 0 && typeof duration === \"number\") {\n      closeTimeoutRef.current = setTimeout(() => {\n        handleClose();\n      }, duration);\n    }\n\n    return () => {\n      closeTimeoutRef.current && clearTimeout(closeTimeoutRef.current);\n    };\n  }, []);\n\n  // Handles hide & hideAll\n  useEffect(() => {\n    if (!props.open) {\n      // Unregister close timeout\n      closeTimeoutRef.current && clearTimeout(closeTimeoutRef.current);\n\n      // Close animation them remove from stack.\n      handleClose();\n    }\n  }, [props.open]);\n\n  const handleClose = () => {\n    Animated.timing(animation, {\n      toValue: 0,\n      useNativeDriver: Platform.OS !== \"web\",\n      duration: animationDuration,\n    }).start(() => onDestroy());\n  };\n\n  const panReleaseToLeft = (gestureState: PanResponderGestureState) => {\n    Animated.timing(getPanResponderAnim(), {\n      toValue: { x: (-dims.width / 10) * 9, y: gestureState.dy },\n      useNativeDriver: Platform.OS !== \"web\",\n      duration: 250,\n    }).start(() => onDestroy());\n  };\n\n  const panReleaseToRight = (gestureState: PanResponderGestureState) => {\n    Animated.timing(getPanResponderAnim(), {\n      toValue: { x: (dims.width / 10) * 9, y: gestureState.dy },\n      useNativeDriver: Platform.OS !== \"web\",\n      duration: 250,\n    }).start(() => onDestroy());\n  };\n\n  const getPanResponder = () => {\n    if (panResponderRef.current) return panResponderRef.current;\n    panResponderRef.current = PanResponder.create({\n      onMoveShouldSetPanResponder: (_, gestureState) => {\n        //return true if user is swiping, return false if it's a single click\n        return !(gestureState.dx === 0 && gestureState.dy === 0);\n      },\n      onPanResponderMove: (_, gestureState) => {\n        getPanResponderAnim()?.setValue({\n          x: gestureState.dx,\n          y: gestureState.dy,\n        });\n      },\n      onPanResponderRelease: (_, gestureState) => {\n        if (gestureState.dx > 50) {\n          panReleaseToRight(gestureState);\n        } else if (gestureState.dx < -50) {\n          panReleaseToLeft(gestureState);\n        } else {\n          Animated.spring(getPanResponderAnim(), {\n            toValue: { x: 0, y: 0 },\n            useNativeDriver: Platform.OS !== \"web\",\n          }).start();\n        }\n      },\n    });\n    return panResponderRef.current;\n  };\n\n  const getPanResponderAnim = () => {\n    if (panResponderAnimRef.current) return panResponderAnimRef.current;\n    panResponderAnimRef.current = new Animated.ValueXY({ x: 0, y: 0 });\n    return panResponderAnimRef.current;\n  };\n\n  if (icon === undefined) {\n    switch (type) {\n      case \"success\": {\n        if (successIcon) {\n          icon = successIcon;\n        }\n        break;\n      }\n\n      case \"danger\": {\n        if (dangerIcon) {\n          icon = dangerIcon;\n        }\n        break;\n      }\n      case \"warning\": {\n        if (warningIcon) {\n          icon = warningIcon;\n        }\n        break;\n      }\n    }\n  }\n\n  let backgroundColor = \"\";\n  switch (type) {\n    case \"success\":\n      backgroundColor = successColor || \"#00C851\";\n      break;\n    case \"danger\":\n      backgroundColor = dangerColor || \"#ff4444\";\n      break;\n    case \"warning\":\n      backgroundColor = warningColor || \"#ffbb33\";\n      break;\n    default:\n      backgroundColor = normalColor || \"#333\";\n  }\n\n  const animationStyle: Animated.WithAnimatedObject<ViewStyle> = {\n    opacity: animation,\n    transform: [\n      {\n        translateY: animation.interpolate({\n          inputRange: [0, 1],\n          outputRange: placement === \"bottom\" ? [20, 0] : [-20, 0], // 0 : 150, 0.5 : 75, 1 : 0\n        }),\n      },\n    ],\n  };\n\n  if (swipeEnabled) {\n    animationStyle.transform?.push(\n      getPanResponderAnim().getTranslateTransform()[0]\n    );\n  }\n\n  if (animationType === \"zoom-in\") {\n    animationStyle.transform?.push({\n      scale: animation.interpolate({\n        inputRange: [0, 1],\n        outputRange: [0.7, 1],\n      }),\n    });\n  }\n\n  return (\n    <Animated.View\n      ref={containerRef}\n      {...(swipeEnabled ? getPanResponder().panHandlers : null)}\n      style={[styles.container, animationStyle]}\n    >\n      {props.renderType && props.renderType[type] ? (\n        props.renderType[type](props)\n      ) : props.renderToast ? (\n        props.renderToast(props)\n      ) : (\n        <TouchableWithoutFeedback\n          disabled={!onPress}\n          onPress={() => onPress && onPress(id)}\n        >\n          <View\n            style={[\n              styles.toastContainer,\n              { maxWidth: (dims.width / 10) * 9, backgroundColor },\n              style,\n            ]}\n          >\n            {icon ? <View style={styles.iconContainer}>{icon}</View> : null}\n            {React.isValidElement(message) ? (\n              message\n            ) : (\n              <Text style={[styles.message, textStyle]}>{message}</Text>\n            )}\n          </View>\n        </TouchableWithoutFeedback>\n      )}\n    </Animated.View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: { width: \"100%\", alignItems: \"center\" },\n  toastContainer: {\n    paddingHorizontal: 12,\n    paddingVertical: 12,\n    borderRadius: 5,\n    marginVertical: 5,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    overflow: \"hidden\",\n  },\n  message: {\n    color: \"#fff\",\n    fontWeight: \"500\",\n  },\n  iconContainer: {\n    marginRight: 5,\n  },\n});\n\nexport default Toast;\n","import { useEffect, useState } from \"react\";\nimport { Dimensions, ScaledSize } from \"react-native\";\n\nexport function useDimensions() {\n  const [dimensions, setDimensions] = useState(Dimensions.get(\"window\"));\n\n  const onChange = ({ window }: { window: ScaledSize }) => {\n    setDimensions(window);\n  };\n\n  useEffect(() => {\n    Dimensions.addEventListener(\"change\", onChange);\n\n    return () => Dimensions.removeEventListener(\"change\", onChange);\n  }, []);\n\n  return dimensions;\n}\n","import React, { Component } from \"react\";\nimport {\n  StyleSheet,\n  ViewStyle,\n  KeyboardAvoidingView,\n  Platform,\n} from \"react-native\";\nimport Toast, { ToastOptions, ToastProps } from \"./toast\";\n\nexport interface Props extends ToastOptions {\n  renderToast?(toast: ToastProps): JSX.Element;\n  renderType?: { [type: string]: (toast: ToastProps) => JSX.Element };\n  offset?: number;\n  offsetTop?: number;\n  offsetBottom?: number;\n  swipeEnabled?: boolean;\n}\n\ninterface State {\n  toasts: Array<ToastProps>;\n}\n\nclass ToastContainer extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      toasts: [],\n    };\n  }\n\n  static defaultProps: Props = {\n    placement: \"bottom\",\n    offset: 10,\n    swipeEnabled: true,\n  };\n\n  /**\n   * Shows a new toast. Returns id\n   */\n  show = (message: string | JSX.Element, toastOptions?: ToastOptions) => {\n    let id = toastOptions?.id || Math.random().toString();\n    const onDestroy = () => {\n      toastOptions?.onClose && toastOptions?.onClose();\n      this.setState({ toasts: this.state.toasts.filter((t) => t.id !== id) });\n    };\n\n    requestAnimationFrame(() => {\n      this.setState({ toasts: this.state.toasts.filter((t) => t.id !== id) });\n      this.setState({\n        toasts: [\n          {\n            id,\n            onDestroy,\n            message,\n            open: true,\n            onHide: () => this.hide(id),\n            ...this.props,\n            ...toastOptions,\n          },\n          ...this.state.toasts,\n        ],\n      });\n    });\n\n    return id;\n  };\n\n  /**\n   * Updates a toast, To use this create you must pass an id to show method first, then pass it here to update the toast.\n   */\n  update = (\n    id: string,\n    message: string | JSX.Element,\n    toastOptions?: ToastOptions\n  ) => {\n    this.setState({\n      toasts: this.state.toasts.map((toast) =>\n        toast.id === id ? { ...toast, message, ...toastOptions } : toast\n      ),\n    });\n  };\n\n  /**\n   * Removes a toast from stack\n   */\n  hide = (id: string) => {\n    this.setState({\n      toasts: this.state.toasts.map((t) =>\n        t.id === id ? { ...t, open: false } : t\n      ),\n    });\n  };\n\n  /**\n   * Removes all toasts in stack\n   */\n  hideAll = () => {\n    this.setState({\n      toasts: this.state.toasts.map((t) => ({ ...t, open: false })),\n    });\n  };\n\n  renderBottomToasts() {\n    const { toasts } = this.state;\n    let { offset, offsetBottom } = this.props;\n    let style: ViewStyle = {\n      bottom: offsetBottom || offset,\n      justifyContent: \"flex-end\",\n      flexDirection: \"column\",\n    };\n    return (\n      <KeyboardAvoidingView\n        behavior={Platform.OS === \"ios\" ? \"position\" : undefined}\n        style={[styles.container, style]}\n        pointerEvents=\"box-none\"\n      >\n        {toasts\n          .filter((t) => !t.placement || t.placement === \"bottom\")\n          .map((toast) => (\n            <Toast key={toast.id} {...toast} />\n          ))}\n      </KeyboardAvoidingView>\n    );\n  }\n\n  renderTopToasts() {\n    const { toasts } = this.state;\n    let { offset, offsetTop } = this.props;\n    let style: ViewStyle = {\n      top: offsetTop || offset,\n      justifyContent: \"flex-start\",\n      flexDirection: \"column-reverse\",\n    };\n    return (\n      <KeyboardAvoidingView\n        behavior={Platform.OS === \"ios\" ? \"position\" : undefined}\n        style={[styles.container, style]}\n        pointerEvents=\"box-none\"\n      >\n        {toasts\n          .filter((t) => t.placement === \"top\")\n          .map((toast) => (\n            <Toast key={toast.id} {...toast} />\n          ))}\n      </KeyboardAvoidingView>\n    );\n  }\n\n  render() {\n    return (\n      <>\n        {this.renderTopToasts()}\n        {this.renderBottomToasts()}\n      </>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 0,\n    position: \"absolute\",\n    width: \"100%\",\n    maxWidth: \"100%\",\n    zIndex: 999999,\n    left: 0,\n    right: 0,\n    ...(Platform.OS === \"web\" ? { overflow: \"hidden\" } : null),\n  },\n  message: {\n    color: \"#333\",\n  },\n});\n\nexport default ToastContainer;\n","import React from \"react\";\nimport ToastContainer from \"../toast-container\";\n\nexport type ToastType = Pick<\n  ToastContainer,\n  \"show\" | \"update\" | \"hide\" | \"hideAll\"\n>;\n\nconst ToastContext = React.createContext({} as ToastType);\n\nexport default ToastContext;\n","import React, { FC, useEffect, useRef, useState } from \"react\";\nimport ToastContext from \"./context\";\nimport Toast, { Props } from \"../toast-container\";\n\nconst ToastProvider: FC<Props> = ({ children, ...props }) => {\n  const toastRef = useRef(null);\n  const [refState, setRefState] = useState({});\n\n  useEffect(() => {\n    setRefState(toastRef.current as any);\n  }, []);\n\n  return (\n    <ToastContext.Provider value={refState as any}>\n      {children}\n      <Toast ref={toastRef} {...props} />\n    </ToastContext.Provider>\n  );\n};\n\nexport default ToastProvider;\n","import { useContext } from \"react\";\nimport ToastContext, { ToastType } from \"./context\";\n\nconst useToast = (): ToastType => useContext(ToastContext);\n\nexport default useToast;\n"],"sourceRoot":""}